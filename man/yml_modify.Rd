% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ymlplyr.R
\name{yml_replace}
\alias{yml_replace}
\alias{yml_append}
\title{Modify YAML file headers}
\usage{
yml_replace(file, what, output = file, encoding = getOption("encoding"))

yml_append(file, what, output = file, encoding = getOption("encoding"))
}
\arguments{
\item{file}{the path to the file that contains the YAML header to modify.}

\item{what}{a list providing the elements to add or modify in the YAML
header.}

\item{output}{the path to the file with the modified YAML header.}

\item{encoding}{the encoding for the input file.}
}
\value{
the path of the file containing the modified YAML header.
}
\description{
When the list of elements provided does not already exist in the YAML file,
both \code{yml_overwrite} and \code{yml_append} behave the same way and will add it to
the YAML header. However, if the element already exists, \code{yml_overwrite}
will replace the values with the one provided by the function, while
\code{yml_append} will add them.
}
\details{
Use \code{NULL} to remove a value from the YAML header.
}
\examples{

pet_yaml_file <- system.file("yaml_examples", "pets.yml",
                             package="ymlplyr")
cat(readLines(con = pet_yaml_file), sep="\\n")

## Add elements
example1 <- tempfile()
yml_append(pet_yaml_file,
           list(pets = list(dogs = c("Milou", "Santa Claus"),
                            cats = "Kitty",
                            rat = "Ratatouille")),
           output = example1)
cat(readLines(con = example1), sep = "\\n")
unlink(example1)

## Replace elements
example2 <- tempfile()
yml_replace(pet_yaml_file,
           list(pets = list(dogs = "Milou", cats = "Kitty")),
           output = example2)
cat(readLines(con = example2), sep = "\\n")
unlink(example2)

## Remove elements
example3 <- tempfile()
yml_replace(pet_yaml_file, list(pets = list(dogs = NULL)),
            output = example3)
cat(readLines(con = example3), sep = "\\n")
unlink(example3)


}
